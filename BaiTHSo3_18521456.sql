




--1 
SET  SERVEROUTPUT ON;
---A
CREATE TABLE CAU1(
    ID      NUMBER,
    NAME    VARCHAR2(20)
);
---B
CREATE SEQUENCE CAU1SEQ
    START WITH 5
    INCREMENT BY 5;
    
DECLARE
    
    ---C
    V_NAME      STUDENT.LASTNAME%TYPE;
    V_ID        STUDENT.STUDENTID%TYPE;
    
    
    CURSOR D IS SELECT S.LASTNAME
                FROM STUDENT S JOIN ENROLLMENT E ON S.STUDENTID=E.STUDENTID
                GROUP BY S.LASTNAME, S.STUDENTID
                ORDER BY COUNT(CLASSID) DESC
                FETCH FIRST 1 ROW WITH TIES;
    CURSOR E IS SELECT S.LASTNAME
                FROM STUDENT S JOIN ENROLLMENT E ON S.STUDENTID=E.STUDENTID
                GROUP BY S.LASTNAME, S.STUDENTID
                ORDER BY COUNT(CLASSID) ASC
                FETCH FIRST 1 ROW WITH TIES;
    ---f,g
    TYPE T_ID IS TABLE OF STUDENT.STUDENTID%TYPE INDEX BY BINARY_INTEGER;
    L_ID        T_ID;
    L_ID_COUNT  NUMBER:=0;
    CURSOR F IS SELECT I.LASTNAME
                FROM INSTRUCTOR I JOIN CLASS C ON I.INSTRUCTORID=C.INSTRUCTORID
                GROUP BY I.LASTNAME, I.INSTRUCTORID
                ORDER BY COUNT(CLASSID) DESC
                FETCH FIRST 1 ROW WITH TIES;
    ----
    L_ID_COUNT1 NUMBER:=0;
    CURSOR I IS SELECT I.LASTNAME
                FROM INSTRUCTOR I JOIN CLASS C ON I.INSTRUCTORID=C.INSTRUCTORID
                GROUP BY I.LASTNAME, I.INSTRUCTORID
                ORDER BY COUNT(CLASSID) ASC
                FETCH FIRST 1 ROW WITH TIES;
BEGIN
    ---D
    OPEN D;
    LOOP
        FETCH D INTO V_NAME;
        EXIT WHEN D%FOUND = FALSE;
        INSERT INTO CAU1 VALUES(CAU1SEQ.NEXTVAL, V_NAME);
    END LOOP;
    CLOSE D;
    SAVEPOINT A;
    ---E
    OPEN E;
    LOOP
        FETCH E INTO V_NAME;
        EXIT WHEN E%FOUND = FALSE;
        INSERT INTO CAU1 VALUES(CAU1SEQ.NEXTVAL, V_NAME);
    END LOOP;
    CLOSE E;
    SAVEPOINT B;
    ---F, G
    OPEN F;
    LOOP
        FETCH F INTO V_NAME;
        EXIT WHEN F%FOUND = FALSE;
        INSERT INTO CAU1 VALUES(CAU1SEQ.NEXTVAL, V_NAME);
        
        L_ID_COUNT := L_ID_COUNT+1;
        SELECT ID INTO L_ID(L_ID_COUNT)
        FROM CAU1
        WHERE V_NAME = NAME;
    END LOOP;
    CLOSE F;
    SAVEPOINT C;
    ---H
    ROLLBACK TO SAVEPOINT B;
    ---I
    OPEN I;
    LOOP
        FETCH I INTO V_NAME;
        EXIT WHEN I%FOUND = FALSE;
        
        L_ID_COUNT1 := L_ID_COUNT1+1;
        IF L_ID_COUNT1 <= L_ID_COUNT THEN
            INSERT INTO CAU1 VALUES(L_ID(L_ID_COUNT), V_NAME);
        ELSE
            INSERT INTO CAU1 VALUES(CAU1SEQ.NEXTVAL, V_NAME);
        END IF;
    END LOOP;
    CLOSE I;
    ---J
    OPEN F;
    LOOP
        FETCH F INTO V_NAME;
        EXIT WHEN F%FOUND = FALSE;
        INSERT INTO CAU1 VALUES(CAU1SEQ.NEXTVAL, V_NAME);
        
    END LOOP;
    CLOSE F;
END;
/
--------2

DECLARE
    V_ID    STUDENT.STUDENTID%TYPE;
    V_F     STUDENT.FIRSTNAME%TYPE;
    V_L     STUDENT.LASTNAME%TYPE;
    V_SC    NUMBER;
BEGIN
    V_ID := &STUDENT_ID;
    SELECT  S.FIRSTNAME, S.LASTNAME, COUNT(E.CLASSID)
            INTO V_F, V_L, V_SC
    FROM    STUDENT S LEFT JOIN ENROLLMENT E ON S.STUDENTID = E.STUDENTID
    WHERE   S.STUDENTID = V_ID
    GROUP BY S.FIRSTNAME, S.LASTNAME, S.STUDENTID;
    DBMS_OUTPUT.PUT_LINE(V_F||' '||V_L||' SO LOP: '||V_SC);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO STUDENT(STUDENTID, FIRSTNAME, LASTNAME, ADDRESS, REGISTRATIONDATE)
            VALUES(V_ID, '&FIRSTNAME', '&LASTNAME', '&ADDRESS', TO_DATE('&REGISTRATIONDATE','dd/MM/yyyy'));
END;
/
-----------------------BAI 2---------------
--------1
CREATE OR REPLACE PROCEDURE  BAI2_1(V_ID IN INSTRUCTOR.INSTRUCTORID%TYPE)
IS
    V_SL    NUMBER;
BEGIN
    SELECT  COUNT(CLASSID) INTO V_SL
    FROM    CLASS
    WHERE   V_ID = INSTRUCTORID;
    
    IF V_SL > 5 THEN
        RAISE_APPLICATION_ERROR(-20001,'GIAO VIEN CAN NGHI NGOI');
    ELSE
        DBMS_OUTPUT.PUT_LINE('SO LOP: '||V_SL);
    END IF;
END;

EXECUTE BAI2_1(101);
/
-------------2
CREATE OR REPLACE PROCEDURE BAI2_2(V_ID IN STUDENT.STUDENTID%TYPE, V_IDC IN CLASS.CLASSID%TYPE)
IS
    V_DIEM  CHAR;
BEGIN
    SELECT  CASE 
            WHEN GRADE >= 90 AND GRADE < 100 THEN 'A'
            WHEN GRADE >= 80 AND GRADE < 90 THEN 'B'
            WHEN GRADE >= 70 AND GRADE < 80 THEN 'C'
            WHEN GRADE >= 50 AND GRADE < 70 THEN 'D'
            ELSE 'F'
            END INTO V_DIEM
    FROM    GRADE
    WHERE   STUDENTID=V_ID AND CLASSID=V_IDC;
    
    DBMS_OUTPUT.PUT_LINE('DIEM: '||V_DIEM);
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN 
            RAISE_APPLICATION_ERROR(-20002,'SAI ID');
END;

EXECUTE BAI2_2(102,86);

/
-----------------------BAI 3---------------
CREATE OR REPLACE PROCEDURE BAI3
AS
V_CNO       COURSE.COURSENO%TYPE;
V_DES       COURSE.DESCRIPTION%TYPE;
V_IDC       CLASS.CLASSID%TYPE;
V_CS        NUMBER;
CURSOR C3 IS SELECT C.COURSENO, C.DESCRIPTION
            FROM COURSE C;
CURSOR C3_1 IS SELECT CL.CLASSID, COUNT(E.STUDENTID)
            FROM CLASS CL JOIN ENROLLMENT E ON CL.CLASSID = E.CLASSID
            WHERE CL.COURSENO=V_CNO
            GROUP BY CL.CLASSID;
BEGIN
    OPEN C3;
    LOOP
        FETCH C3 INTO V_CNO, V_DES;
        EXIT WHEN C3%FOUND = FALSE;
        DBMS_OUTPUT.PUT_LINE(V_CNO||' '||V_DES);
        OPEN C3_1;
        LOOP
            FETCH C3_1 INTO V_IDC, V_CS;
            EXIT WHEN C3_1%FOUND = FALSE;
            DBMS_OUTPUT.PUT_LINE('  LOP: '||V_IDC||
            ' co so luong sinh vien dang ky: '||V_CS);
        END LOOP;
        CLOSE C3_1;
    END LOOP;
    CLOSE C3;
END;
EXECUTE BAI3;
/
-----------------------BAI 4---------------
-------------1
-------A
CREATE OR REPLACE PROCEDURE FIND_SNAME(I_STUDENT_ID IN STUDENT.STUDENTID%TYPE,
                                        O_FIRST_NAME OUT STUDENT.FIRSTNAME%TYPE,
                                        O_LAST_NAME OUT STUDENT.LASTNAME%TYPE)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME INTO O_FIRST_NAME, O_LAST_NAME
    FROM STUDENT
    WHERE STUDENTID = I_STUDENT_ID;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002,'WORNG STUDENTID');
END;

DECLARE
    O1  STUDENT.FIRSTNAME%TYPE;
    O2  STUDENT.LASTNAME%TYPE;
BEGIN
    FIND_SNAME(372,O1,O2);
    DBMS_OUTPUT.PUT_LINE(O1||' '||O2);
END;
/
-------B
CREATE OR REPLACE PROCEDURE PRINT_STUDENT_NAME(I_STUDENT_ID IN STUDENT.STUDENTID%TYPE)                              
AS
    V_F  STUDENT.FIRSTNAME%TYPE;
    V_L  STUDENT.LASTNAME%TYPE;
BEGIN
    SELECT FIRSTNAME, LASTNAME INTO V_F, V_L
    FROM STUDENT
    WHERE STUDENTID = I_STUDENT_ID;
    DBMS_OUTPUT.PUT_LINE(V_F||' '||V_L);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002,'WORNG STUDENTID');
END;
EXECUTE PRINT_STUDENT_NAME(372);
-------------2
CREATE OR REPLACE PROCEDURE DISCOUNT
AS
V_CNO   COURSE.COURSENO%TYPE;
V_CNA   COURSE.DESCRIPTION%TYPE;
V_SS    NUMBER;
CURSOR C4_2 IS  SELECT  C.COURSENO, C.DESCRIPTION, COUNT(STUDENTID)
                FROM    (COURSE C JOIN CLASS CL ON C.COURSENO=CL.COURSENO)
                        JOIN ENROLLMENT E ON CL.CLASSID=E.CLASSID
                GROUP BY C.COURSENO, C.DESCRIPTION;
BEGIN
    OPEN C4_2;
    LOOP
        FETCH C4_2 INTO V_CNO, V_CNA, V_SS;
        EXIT WHEN C4_2%FOUND = FALSE;
        IF V_SS > 15 THEN
            UPDATE COURSE
            SET COST = COST*.95 
            WHERE V_CNO=COURSENO;
            DBMS_OUTPUT.PUT_LINE(V_CNO||' '||V_CNA);
        END IF;
    END LOOP;
    CLOSE C4_2;
END;
EXECUTE DISCOUNT;
/
-------------3
CREATE OR REPLACE FUNCTION TOTAL_COST_FOR_STUDENT (V_SID STUDENT.STUDENTID%TYPE)
RETURN COURSE.COST%TYPE
AS
	V_S_COST COURSE.COST%TYPE;
BEGIN
	SELECT  SUM(CO.COST) INTO V_S_COST
	FROM    (ENROLLMENT E JOIN CLASS C ON E.CLASSID = C.CLASSID) 
            JOIN COURSE CO ON C.COURSENO=CO.COURSENO
	WHERE   E.STUDENTID = V_SID;
	
	RETURN V_S_COST;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN RETURN NULL;
END;

DECLARE
V_SC    COURSE.COST%TYPE;
BEGIN
    V_SC := TOTAL_COST_FOR_STUDENT(102);
    DBMS_OUTPUT.PUT_LINE(V_SC);
END;
/
-----------------------BAI 5---------------
-------------1
---TABLE CLASS
CREATE OR REPLACE TRIGGER CLASS_B5_I
BEFORE INSERT ON CLASS
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
--
CREATE OR REPLACE TRIGGER CLASS_B5_U
BEFORE UPDATE ON CLASS
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
---TABLE COURSE
CREATE OR REPLACE TRIGGER COURSE_B5_I
BEFORE INSERT ON COURSE
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER COURSE_B5_U
BEFORE UPDATE ON COURSE
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
---TABLE ENROLLMENT
CREATE OR REPLACE TRIGGER ENROLLMENT_B5_I
BEFORE INSERT ON ENROLLMENT
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER ENROLLMENT_B5_U
BEFORE UPDATE ON ENROLLMENT
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
---TABLE GRADE
CREATE OR REPLACE TRIGGER GRADE_B5_I
BEFORE INSERT ON GRADE
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER GRADE_B5_U
BEFORE UPDATE ON GRADE
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
---TABLE INSTRUCTOR
CREATE OR REPLACE TRIGGER INSTRUCTOR_B5_I
BEFORE INSERT ON INSTRUCTOR
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER INSTRUCTOR_B5_U
BEFORE UPDATE ON INSTRUCTOR
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
---TABLE STUDENT
CREATE OR REPLACE TRIGGER STUDENT_B5_I
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
    :NEW.CREATEDBY := USER; 
    :NEW.CREATEDDATE := SYSDATE;
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
CREATE OR REPLACE TRIGGER STUDENT_B5_U
BEFORE UPDATE ON STUDENT
FOR EACH ROW
BEGIN
    :NEW.MODIFIEDBY := USER; 
    :NEW.MODIFIEDDATE := SYSDATE;
END;
/
-------------2
CREATE OR REPLACE TRIGGER BAI5_2
BEFORE INSERT OR UPDATE ON ENROLLMENT
FOR EACH ROW
DECLARE 
		V_SO_MH	NUMBER;
BEGIN
		SELECT COUNT(CLASSID) INTO V_SO_MH
		FROM ENROLLMENT
		WHERE	:NEW.STUDENTID = STUDENTID;

		IF V_SO_MH >= 4 THEN
			RAISE_APPLICATION_ERROR(21245,'SO MON TOI DA');
		END IF;
END;
/
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE) 
    VALUES (102, 91, TO_DATE('12/12/2015','dd/MM/yyyy'));
    
SELECT CLASSID-- INTO V_SO_MH
FROM ENROLLMENT
WHERE	102 = STUDENTID;

DELETE FROM ENROLLMENT WHERE CLASSID=79 AND STUDENTID=102;



