

---a) Viet trigger moi sv khong duoc dang ky qua 4 lop hoc

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER TG_KTLH 
BEFORE INSERT 
ON ENROLLMENT
FOR EACH ROW
DECLARE 
	@COUNT INT;
BEGIN 
	SELECT COUNT(CLASSID)
	INTO @COUNT 
	FROM ENROLLMENT
	WHERE STUDENTID=:NEW.STUDENTID;
	IF(@COUNT > 4 ) THEN 
		RAISE_APPLICATION_ERROR(-1000,'DANG KY VUOT QUA 4');
	ELSE
		DBMS_OUTPUT.PUT_LINE('DANG KY THANH CONG');
	END IF;
END;

	

--- b). 

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PROC_CAUB
AS
  V_COURSE_NO   COURSE.COURSENO%TYPE;
  V_COURSE_DES  COURSE.DESCRIPTION%TYPE;
  V_CLASS_ID    CLASS.CLASSID%TYPE;
  V_COUNT       NUMBER;
  CURSOR CAU2B IS
    SELECT COURSENO,DESCRIPTION
    FROM COURSE;
  CURSOR CAU2B_1 IS
    SELECT CLASSID, COUNT(STUDENTID)
    FROM ENROLLMENT ER, CLASS CL
    WHERE ER.CLASSID=CL.CLASSID
    GROUP BY CL.CLASSID;
BEGIN
  OPEN CAU2B;
  LOOP
    FETCH CAU2B INTO V_COURSE_NO,V_COURSE_DES;
    EXIT WHEN CAU2B% FOUND = FALSE;
    DBMS_OUTPUT.PUTLINE(‘MON HOC: ’||V_COURSE_DES||’(MA MH: ‘||V_COURSE_NO||’)’);
    OPEN CAU2B_1;
    LOOP
      FETCH CAU2B_1 INTO V_CLASS_ID,V_COUNT;
      EXIT WHEN CAU2B_1% FOUND = FALSE;
      DBMS_OUTPUT.PUTLINE('-----LOP: '||V_CLASS_ID||' CO SO LUONG SINH VIEN DANG KY: '||V_COUNT);
    END LOOP;
    CLOSE CAU2B_1;
  END LOOP;
  CLOSE CAU2B;
END;


---c) 	

CREATE OR REPLACE FUNCTION Total_cost_for_student ( v_StudentID IN GRADE.StudentID%TYPE)
RETURN COURSE.COST%TYPE
AS 
	c_RESULT COURSE.COST%TYPE;
BEGIN 
	SELECT SUM(COST)
	INTO V_RESULT
	FROM CLASS cl
	INNER JOIN COURSE co ON cl.CourseNo = co.CourseNo
	INNER JOIN GRADE gra ON cl.ClassID = gra.ClassID
	WHERE v_StudentID = StudentID;
	RETURN c_RESULT;

	
END;

SET SERVEROUTPUT ON;
DECLARE
  X COURSE.COST%TYPE;
  Y GRADE.STUDENTID%TYPE;
BEGIN
  X := TOTAL_COST_FOR_STUDENT(&Y);
  IF X>0
  THEN
  DBMS_OUTPUT.PUT_LINE('Tong Chi Phi Phai Tra: '|| X ); 
  ELSE
  DBMS_OUTPUT.PUT_LINE('NULL');
  END IF;
END;

















